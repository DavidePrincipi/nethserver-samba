#!/usr/bin/perl

#
# Copyright (C) 2013 Nethesis S.r.l.
# http://www.nethesis.it - support@nethesis.it
# 
# This script is part of NethServer.
# 
# NethServer is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License,
# or any later version.
# 
# NethServer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with NethServer.  If not, see <http://www.gnu.org/licenses/>.
#

use strict;
use NethServer::Directory;
use NethServer::Service;
use NethServer::Migrate;
use esmith::AccountsDB;
use esmith::ConfigDB;
use esmith::event;
use esmith::util;
use File::Temp;
use File::Copy;
use User::grent;
use Net::LDAP::LDIF;
use Carp;
use Data::Dumper;

sub importDomainSid($$);
sub getSmbPasswd($);
sub getStaticGroupDb($);


my $event = shift;
my $sourceDir = shift;
my $esmithDbDir = '/home/e-smith/db';
my $errors = 0;
my $ldapResponse;

if( ! $event ) {
    die("Missing event argument!\n");
}

if( ! $sourceDir ) {
    die("Missing sourceDir argument!\n");
}

NethServer::Service::stop($_) foreach (qw(smb nmb winbind));

my $srcConfigDb = esmith::ConfigDB->open_ro(join('', $sourceDir, $esmithDbDir, '/configuration')) or die("Could not open source configuration database in $sourceDir \n");
my $dstConfigDb = esmith::ConfigDB->open('configuration') or die("Could not open configuration account db\n");

my $srcAccountsDb = esmith::AccountsDB->open_ro(join('', $sourceDir, $esmithDbDir, '/accounts')) or die("Could not open source accounts database in $sourceDir \n");
my $dstAccountsDb = esmith::AccountsDB->open('accounts') or die("Could not open destination account db\n");

my $ldap = NethServer::Directory->new() or die("Could not connect LDAP server\n");
my $LdapInternalSuffix = NethServer::Directory::getInternalSuffix();

# The default algorithmicRidBase in smb.conf:
my $algorithmicRidBase = 1000;
my $domainName = uc($srcConfigDb->get_prop('smb', 'Workgroup')) or die("Could not obtain Workgroup prop value from source configuration database\n");
my $serverRole = $srcConfigDb->get_prop('smb', 'ServerRole') || 'WS';

warn "[INFO] migrating domain $domainName (role $serverRole)\n";

my @pdcProps = (    
    RoamingProfiles => $srcConfigDb->get_prop('smb', 'RoamingProfiles') || 'no',
    NetbiosAliasList => uc($srcConfigDb->get_value('SystemName')),
    LogonDrive => sprintf("%s:", $srcConfigDb->get_prop('smb', 'LogonDrive') || 'Z'),
);

# Copy some smb props in dst db:
$dstConfigDb->get('smb')->merge_props(
    ServerRole => $serverRole,
    Workgroup => uc($domainName),
    $serverRole eq 'PDC' ? @pdcProps : ()
);
$dstConfigDb->reload();

system(qw(/sbin/e-smith/expand-template /etc/samba/smb.conf));
if($? != 0) {
    die("[ERROR] failed to expand /etc/samba/smb.conf template");
}

my %userDb = getSmbPasswd($sourceDir . '/etc/samba/smbpasswd');

#
# re-expand /etc/hosts to include our NetbiosAliasList
#
system(qw(/sbin/e-smith/expand-template /etc/hosts));

if($serverRole eq 'WS') {
    wsMigration();
} elsif($serverRole eq 'PDC') {
    pdcMigration();
} else {
    warn "[INFO] server role is set to $serverRole. Nothing left to do.\n";
}

# Restart services:
if( ! esmith::event::event_signal('nethserver-samba-save')) {
    warn("[ERROR] nethserver-samba-save event failed\n");
    $errors++;
}

if($errors > 0) {
    warn "[WARNING] $errors error(s) occurred in nethserver-samba-migrate action\n";
    exit(1);
}

# action ends:
exit(0);

####################
# END of migration
####################

#
# Migrate user, group and machine accounts; fix account SID.
#
sub pdcMigration 
{
    # Clean previous LDAP sambaDomain objects:
    dropLdapSambaDomains();

    # Import the domain SID entry, from secrets.tdb
    my $domainSid = importDomainSid($domainName, $sourceDir . '/etc/samba/secrets.tdb') or die("[ERROR] Could not obtain domain SID\n");

    # Store SID in DB for futre hostname changes:
    $dstConfigDb->set_prop('smb', 'Sid', $domainSid);

    warn "[INFO] $domainName SID is $domainSid\n";


    #
    # migrate machine accounts
    #
    foreach ($srcAccountsDb->get_all_by_prop(type => 'machine')) {

	if($dstAccountsDb->get($_->key)) {
	    print "[WARNING] skipping existing machine account " . $_->key . "\n";
	    next;
	}

	$dstAccountsDb->set_prop($_->key, 'Uid', $_->prop('Uid'), type => 'machine');

	my $secret = esmith::util::genRandomHash();

	open(PH, '|-', '/usr/bin/pdbedit -t -a -m -u ' . $_->key . ' >/dev/null 2>&1');
	print PH $secret . "\n" . $secret . "\n";
	if( ! close(PH)) {
	    warn "[ERROR] failed to add machine account " . $_->key . " in SAM db\n";
	    $errors ++;
	}
    }

    my %groupDb = getStaticGroupDb($sourceDir . '/etc/group');

    addExistingGroups(\%groupDb);

    #
    # sync user and machine SIDs and passwords
    #
    foreach ($dstAccountsDb->get_all_by_prop(type => 'machine'), 
	     $dstAccountsDb->get_all_by_prop(type => 'user')) {

	my $uid = $_->key;

	if( ! getpwnam($uid)) {
	    warn "[WARNING] $uid was not found in passwd database: skipped.\n";
	    next;
	}

	my $branch = $_->prop('type') eq 'machine' ? 'Computers' : 'People';
	my $userDn = sprintf('uid=%s,ou=%s,%s', $uid, $branch, $LdapInternalSuffix);

	my $attrs = {};

	if($userDb{$uid}) {
	    $attrs->{sambaSID} = $domainSid . '-' . $userDb{$uid}->{rid};
	    $attrs->{sambaNTPassword} = $userDb{$uid}->{password};
	} else {
	    warn "[ERROR] smbpasswd entry not found: $uid.\n";
	    $errors++;
	    next;
	}

	$ldapResponse = $ldap->modify($userDn, replace => $attrs);
	if($ldapResponse->is_error) {
	    warn "[ERROR] failed to update $userDn SAM entry\n";
	    $errors++;
	    next;
	} 

	# For 'user' records, update user primary group and set Samba prop
	# 'enabled':
	if($_->prop('type') eq 'user') {

	    my $groupDn = sprintf('cn=%s,ou=Groups,%s', $uid, $LdapInternalSuffix);

	    if($groupDb{$uid}) {
		my $rid = $groupDb{$uid}->{rid};

		$ldapResponse = $ldap->modify($groupDn, replace => {
		    'sambaSID' => $domainSid . '-' . $rid
					      });	

		if($ldapResponse->is_error) {
		    warn "[ERROR] failed to update $groupDn SAM entry\n";
		    $errors++
		}

	    } else {
		warn "[WARNING] rid not found for user $uid primary group\n";
		next;
	    }

	    # This is normally set on record creation, but
	    # nethserver-directory-migrate doesn't push it in:
	    $_->set_prop('Samba', 'enabled');

	    # ..so a modify event must be signalled:
	    if( ! esmith::event::event_signal('user-modify', $uid)) {
		warn("[ERROR] user-modify $uid event failed\n");
		$errors++;
	    }

	}

    }

    #
    # migrate groups SIDs
    #
    foreach my $gid ( keys %{{
	(map { $_->key => 1 } $dstAccountsDb->get_all_by_prop(type => 'group')), 
	qw(
	  locals       1
	  domadmins    1
	  domguests    1
	  domcomputers 1 
	)}} ) {

	my $groupDn = sprintf('cn=%s,ou=Groups,%s', $gid, $LdapInternalSuffix);

	my $attrs = {};

	if($groupDb{$gid}) {
	    $attrs->{sambaSID} = $domainSid . '-' . $groupDb{$gid}->{rid};
	} else {
	    warn "[WARNING] SID not found for group $gid.\n";
	}

	$ldapResponse = $ldap->modify($groupDn, replace => $attrs);
	if($ldapResponse->is_error) {
	    warn "[ERROR] failed to update $groupDn SAM entry\n";
	    $errors++
	}

    }
}

#
# In WS mode migration, only NTLM password hash are retained.
#
sub wsMigration
{
    foreach ($dstAccountsDb->get_all_by_prop(type => 'user')) {
	my $uid = $_->key;

	if( ! getpwnam($uid)) {
	    warn "[WARNING] $uid was not found in passwd database: skipped.\n";
	    next;
	}

	my $userDn = sprintf('uid=%s,ou=%s,%s', $uid, 'People', $LdapInternalSuffix);
	my $attrs = {};

	if($userDb{$uid}) {
	    $attrs->{sambaNTPassword} = $userDb{$uid}->{password};
	} else {
	    warn "[ERROR] smbpasswd entry not found: $uid.\n";
	    $errors++;
	    next;
	}

	$ldapResponse = $ldap->modify($userDn, replace => $attrs);
	if($ldapResponse->is_error) {
	    warn "[ERROR] failed to update $userDn SAM entry\n";
	    $errors++;
	    next;
	} 
       
	# This is normally set on record creation, but
	# nethserver-directory-migrate doesn't push it in:
	$_->set_prop('Samba', 'enabled');

	# ..so a modify event must be signalled:
	if( ! esmith::event::event_signal('user-modify', $uid)) {
	    warn("[ERROR] user-modify $uid event failed\n");
	    $errors++;
	}
    }
}



#
# Move SID records from source secrets.tdb to current secrets.tdb and
# return the domain SID value.  
#
# The domain SID is initialized by samba from secrets.tdb and must not be
# present in LDAP otherwise the LDAP entry takes precedence.  
#
sub importDomainSid($$)
{
    my $sid = '';
    my $domainName = shift;
    my $sourceTdb = shift;
    my $oldMask = umask 077;
    my $secretsTdb = '/var/lib/samba/private/secrets.tdb';

    my $tmpTdb = File::Temp::tmpnam();

    File::Copy::copy($sourceTdb, $tmpTdb) or die("Could not copy secrets.tdb");

    umask $oldMask;

    # Copy the domain SID record in our secrets.tdb:
    system(qq(/usr/bin/tdbtool '${tmpTdb}' move 'SECRETS/SID/${domainName}' '${secretsTdb}' &>/dev/null));
    if($? != 0) {
	warn "[ERROR] Could not import key $domainName SID from $sourceTdb ($tmpTdb): $!\n";
	return '';
    }

    unlink $tmpTdb;

    open(FH, '-|', '/usr/bin/net getdomainsid') or return '';
    while(<FH>) {
	chomp;
	if(/^SID for domain $domainName is: (S-.*)$/) {
	    $sid = $1;
	    last;
	}
    }
    close(FH);

    system(qq(/usr/bin/net setlocalsid $sid));
    if( $? != 0)  {
	warn "[WARNING] failed to set local machine SID!\n";
	return '';
    }

    return $sid;
}

#
# calculate group name => RID association with deterministic formula
#
sub getStaticGroupDb($) 
{
    my $groupFile = shift;
    my %h = %{NethServer::Migrate::parseGroup($groupFile)};
    my %db = ();

    foreach(keys %h) {
	$db{$_} = {
	    gid => $h{$_}->{gid},
	    rid => $algorithmicRidBase + 1 + ($h{$_}->{gid} * 2)
	};
    }

    return %db;
}

#
# obtain user's password hash from smbpasswd DB
#
sub getSmbPasswd($)
{
    my $dumpFileName = shift;
    open(FH, '<', $dumpFileName) or die("Could not open $dumpFileName!");
    my %db = ();

    while(<FH>) {
	my($uname, $uidNumber, $f1, $nthash, $extra) = split(':', $_, 5);

	# Assume RIDs are calculated by a deterministic formula.
	# See "Identity Mapping" Samba HOWTO
	# http://www.samba.org/samba/docs/man/Samba-HOWTO-Collection/idmapper.html#id2605504
	# and "algorithmic rid base" in smb.conf(5) manpage
	my $rid = ($uidNumber * 2) + $algorithmicRidBase;

	my $data = { rid => $rid, password => $nthash };

	# Insert keys in upper/lower/mixed case:
	$db{$uname} = $data;
	$db{lc($uname)} = $data;
	$db{uc($uname)} = $data;
    }

    close(FH);
    return %db;
}


#
# Obtain existing group rids from LDAP backend and add to the passed
# group hash
#
sub addExistingGroups()
{
    # the group hash:
    my $groups = shift;

    my $res = $ldap->search(
	base => "ou=Groups,$LdapInternalSuffix", 
	scope => 'one', 
	filter => '(&(objectClass=posixGroup)(objectClass=sambaGroupMapping))',
	attrs => ['sambaSID', 'cn', 'gidNumber']
	);

    if($res->is_error) {
	return;
    }

    foreach ($res->entries()) {
	my $rid = pop(@{[split('-', $_->get_value('sambaSID'))]});
	my $groupName = $_->get_value('cn');
	my $gid = $_->get_value('gidnumber');

	if(int($rid) > 0 && ! defined $groups->{$groupName}) {
	    $groups->{$groupName} = { 
		rid => $rid, 
		gid => $gid
	    };
	}
    }

}


sub dropLdapSambaDomains
{
    my $result = $ldap->search(
	base => $LdapInternalSuffix, 
	scope => 'one', 
	filter => "objectClass=sambaDomain",
        );
    if(defined $result) {
        foreach my $entry ($result->entries()) {
	    $entry->delete();
	    $entry->update($ldap);
	}
    }
}
